<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java设计模式</title>
      <link href="/blog/2021/02/24/java-she-ji-mo-shi/"/>
      <url>/blog/2021/02/24/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-设计模式"><a href="#Java-设计模式" class="headerlink" title="Java 设计模式"></a>Java 设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>为了节省内存资源、保证数据内容的一致性，对某些类要求只能创建一个实例，这就是所谓的单例模式</p><p>单例模式有 3 个特点：<br>单例类只有一个实例对象；<br>该单例对象必须由单例类自行创建；<br>单例类对外提供一个访问该单例的全局访问点；</p><p>单例模式有饿汉式与懒汉式两种类型：</p><ul><li><p>饿汉式：该模式的特点是类一旦加载就创建一个单例，保证在调用 getInstance 方法之前单例已经存在了。饿汉式单例在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以是线程安全的，可以直接用于多线程而不会出现问题。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HungrySingleton</span> instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉式：该模式的特点是类加载时没有生成单例，只有当第一次调用 getlnstance 方法时才去创建这个单例。懒汉式用于多线程建议使用静态内部类方式保证线程安全。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载与生命周期</title>
      <link href="/blog/2021/02/24/lei-jia-zai-yu-sheng-ming-zhou-qi/"/>
      <url>/blog/2021/02/24/lei-jia-zai-yu-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="java类生命周期与加载"><a href="#java类生命周期与加载" class="headerlink" title="java类生命周期与加载"></a>java类生命周期与加载</h1><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类的生命周期从大的方面可以分为两个部分：</p><ul><li>class–&gt;class对象：状态、链接、初始化</li><li>实例化–&gt;GC：实例化、使用、卸载</li></ul><p><img src="media/15626768196365/15632597596291.jpg"></p><p>Jvm通过状态、连接和初始化一个java类型，使该类型可以被正在运行的java程序使用；</p><ul><li><p>装载：将二进制class文件读入jvm中；</p></li><li><p>链接：将读入的class文件合并到jvm运行时环境中：</p><ul><li>验证：验证class是否符合jvm标准</li><li>准备：为class分配内存；</li><li>解析：将常量池中的符号引用转化为直接引用，jvm实现可延迟解析实现；</li></ul></li><li><p>初始化：将class中的各类静态成员加载至内存中并赋值；</p></li><li><p>使用：对类进行实例化(普通成员初始化、实例构造、成员赋值)及引用；</p></li><li><p>卸载：通过GC对已无引用对象进行资源回收；</p></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>JDK 默认提供了如下几种ClassLoader：</p><ul><li><strong>Bootstrap loader</strong>：Bootstrap加载器是用C++语言写的，它是在Java虚拟机启动后初始化的，它主要负责加载%JAVA_HOME%/jre/lib,-Xbootclasspath参数指定的路径以及%JAVA_HOME%/jre/classes中的类。</li><li><strong>ExtClassLoader</strong>：Bootstrp loader加载ExtClassLoader,并且将ExtClassLoader的父加载器设置为Bootstrp loader.ExtClassLoader是用Java写的，具体来说就是 sun.misc.Launcher$ExtClassLoader，ExtClassLoader主要加载%JAVA_HOME%/jre/lib/ext，此路径下的所有classes目录以及java.ext.dirs系统变量指定的路径中类库。</li><li><strong>AppClassLoader</strong>：Bootstrp loader加载完ExtClassLoader后，就会加载AppClassLoader,并且将AppClassLoader的父加载器指定为 ExtClassLoader。AppClassLoader也是用Java写成的，它的实现类是 sun.misc.Launcher$AppClassLoader，另外我们知道ClassLoader中有个getSystemClassLoader方法,此方法返回的正是AppclassLoader.AppClassLoader主要负责加载classpath所指定的位置的类或者是jar文档，<strong>它也是Java程序默认的类加载器</strong>。</li><li><strong>User-Defined Class Loader</strong>：用户自定义加载器 自己定义从哪里加载类的二进制流；定义自己的加载器步骤为：<ul><li>继承java.lang.ClassLoader</li><li>重写父类findClass方法（<em>因为JDK已经在loadClass方法中帮我们实现了ClassLoader搜索类的算法，当在loadClass方法中搜索不到类时，loadClass方法就会调用findClass方法来搜索类，所以我们只需重写该方法即可。如没有特殊的要求，一般不建议重写loadClass搜索类的算法。</em>）；<br><img src="media/15626768196365/15632617342292.jpg"></li></ul></li></ul><p>java采用了委托模型(双亲委托模型)机制，这个机制简单来讲，就是“类装载器有载入类的需求时，会先请示其Parent使用其搜索路径帮忙载入，如果Parent 找不到,那么才由自己依照自己的搜索路径搜索类”</p><p>每一个层次的类加载器都是如此。因此，所有的加载请求最终都应该传送到顶层的启动类加载器中。</p><p>只有当父加载器反馈自己无法完成这个加载请求时（搜索范围中没有找到所需的类），子加载器才会尝试自己去加载。</p><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。因此，使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处：类随着它的类加载器一起具备了一种带有优先级的层次关系。</p><h2 id="类加载与初始化顺序"><a href="#类加载与初始化顺序" class="headerlink" title="类加载与初始化顺序"></a>类加载与初始化顺序</h2><p>Java类加载机制中最重要的就是程序初始化过程，其中包含了静态资源，非静态资源，父类子类，构造方法之间的执行顺序；</p><ul><li><strong>常规顺序</strong>：父类的静态代码块-&gt;子类的静态代码块-&gt;初始化父类的属性值/父类的普通代码块(自上而下的顺序排列)-&gt;父类的构造方法-&gt;初始化子类的属性值/子类的普通代码块(自上而下的顺序排列)-&gt;子类的构造方法。</li><li><strong>特殊情况</strong>：<ul><li>当类中显示创建静态类对象且构造器中包含对静态变量赋值，此时静态对象与静态变量赋值顺序将决定最终结果的产生；</li><li>静态成员变量和静态代码块只有在类被调用时才会初始化；</li><li>静态内部类只有被外部类调用时才会初始化；</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">{</span>    <span class="token comment">//先赋值然后自增，结果返回为2和3</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> st1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span>  <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1<span class="token operator">++</span><span class="token punctuation">;</span>        value2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> st1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span>    <span class="token comment">//实例化时静态变量尚未赋值，默认值为0，自增后被后续变量赋值覆盖结果返回为1和2</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> st2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">private</span>  <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1<span class="token operator">++</span><span class="token punctuation">;</span>        value2<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> st2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Singleton1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value1=1 value2=2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton value1:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton1</span><span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton value2:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton1</span><span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//value1=11 value2=12</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton2 value1:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton2</span><span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton2 value2:"</span> <span class="token operator">+</span> <span class="token class-name">Singleton2</span><span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主动引用立即对类进行加载的5中情况："><a href="#主动引用立即对类进行加载的5中情况：" class="headerlink" title="主动引用立即对类进行加载的5中情况："></a>主动引用立即对类进行加载的5中情况：</h2><ol><li>使用new关键字初始化对象、读取或设置static字段、调用类的静态方法；</li><li>使用java.lang.reflect对类进行反射调用时，如果类没有初始化，需先初始化</li><li>初始化子类时，父类未初始化，需先初始化父类；</li><li>虚拟机启动时，会先初始化用户指定主类；</li><li>jdk1.7的动态语言支持，java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，且该方法归属类未实例化，需先触发其实例化；</li></ol><h2 id="被动引用不触发初始化三种情况"><a href="#被动引用不触发初始化三种情况" class="headerlink" title="被动引用不触发初始化三种情况"></a>被动引用不触发初始化三种情况</h2><ol><li><p>子类引用父类静态成员，不会触发子类初始化；</p></li><li><p>通过数组定义来引用类，不会触发类实例化；</p></li><li><p>引用其他类常量不会触发本类实例化；</p><p>​      </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO流</title>
      <link href="/blog/2021/02/24/javaio-liu/"/>
      <url>/blog/2021/02/24/javaio-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流相关"><a href="#IO流相关" class="headerlink" title="IO流相关"></a>IO流相关</h1><h2 id="Java-IO流分类："><a href="#Java-IO流分类：" class="headerlink" title="Java IO流分类："></a>Java IO流分类：</h2><p>按流向分类： </p><ul><li>输入流：从文件中读到程序中</li><li>输出流：从程序中输出到文件中</li></ul><p>按操作对象分配：</p><ul><li>字节流：以字节为最小单位进行数据读写</li><li>字符流：以字符为最小单位进行数据读写</li></ul><p>按功能分类：</p><ul><li>节点流：直接与数据源相连进行读写操作</li><li>处理流：在节点流上进行套接，实现节点流读写功能增强</li></ul><p>IO流的设计模式为装饰设计模式，节点流为原始流，实现流的基本功能，处理流包装节点流，进行功能增强，如编码、缓冲等；</p><h2 id="常用IO流"><a href="#常用IO流" class="headerlink" title="常用IO流"></a>常用IO流</h2><h3 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h3><ul><li>InputStream/Reader：抽象类，所有输入流的父类，前者为字节流，后者为字符流<ul><li>FileInputStream/FileReader：文件输入流，接受String型文件路径；<ul><li>BufferedInputStream/BufferedReader：缓冲输入流，接受一个文件输入流对象，对输入流进行功能增强</li><li>InputStreamReader：转换输入流，接受一个InputStream输入流对象及String对象指定字符集，实现字节流向字符流的转换，实际上FileReader是通过转换流来进行实现的；</li></ul></li></ul></li><li>常用方法：<ul><li>int read();：从输入流中读取单个字节，返回所读取的字节数据（字节数据可直接转换为int类型）。</li><li>int read(byte[] b)从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。</li><li>int read(byte[] b,int off,int len); 从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。</li><li>int read(); 从输入流中读取单个字符，返回所读取的字符数据（字节数据可直接转换为int类型）。</li><li>int read(char[] b)从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。</li><li>int read(char[] b,int off,int len); 从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。</li></ul></li></ul><h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><ul><li>OutputStream/Writer：抽象类，所有输出流的父类，前者为字节流，后者为字符流<ul><li>FileOutputStream/FileWriter：文件输出流，接受String型文件路径；<ul><li>BufferedOutputStream/BufferedWriter：缓冲输入流，接受一个文件输入流对象，对输入流进行功能增强</li><li>OutputStreamReader：转换输入流，接受一个OutputStream输入流对象及String对象指定字符集，实现字节流向字符流的转换，实际上FileWriter是通过转换流来进行实现的；</li></ul></li></ul></li><li>常用方法：<ul><li>void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。</li><li>void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。</li><li>void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。</li><li>void write(String str); 将str字符串里包含的字符输出到指定输出流中。</li><li>void write (String str, int off, int len); 将str字符串里面从off位置开始，长度为len的字符输出到指定输出流中。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java读取文件</title>
      <link href="/blog/2021/02/24/java-wen-jian-du-qu/"/>
      <url>/blog/2021/02/24/java-wen-jian-du-qu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java读取文件"><a href="#Java读取文件" class="headerlink" title="Java读取文件"></a>Java读取文件</h1><h2 id="常用获取文件路径方法"><a href="#常用获取文件路径方法" class="headerlink" title="常用获取文件路径方法"></a>常用获取文件路径方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//该方法获取的路径为class文件当前路径，后面可接相对class文件的相对路径文件或classpath为根目录的绝对路径；</span>getClass<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token comment">//该方法获取的路径为classpath的根目录，即'/'，故其后只能跟以非'/'开头的相对路径；</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token comment">//获取执行jar操作系统路径</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span>：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志配置</title>
      <link href="/blog/2021/02/24/java-ri-zhi-pei-zhi/"/>
      <url>/blog/2021/02/24/java-ri-zhi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java日志配置"><a href="#Java日志配置" class="headerlink" title="Java日志配置"></a>Java日志配置</h1><h2 id="常用日志类"><a href="#常用日志类" class="headerlink" title="常用日志类"></a>常用日志类</h2><ul><li>logger：Jdk内置，基本不用于生产环境</li><li>log4j：apache提供，已于2015年停止更新，历史遗留项目仍在使用，最后版本为1.2.17</li><li>log4j2：apache提供，log4j升级版本，性能较log4j提升10倍(官方说明)</li><li>logback：log4j作者出走后重新开发，性能相对log4j有很大提升</li></ul><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>log4j主要通过log4j.properties配置文件进行定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#跟日志</span><span class="token comment">#info：配置日志输出级别</span><span class="token comment">#console：日志附加器，配置日志输出方式，可同时配置多个附加器名称，如不配置，则不生效</span>log4j.rootLogger<span class="token operator">=</span>info,console<span class="token comment">#附加器可自定义名称，如log4j.appender.xxx中，xxx即为附加器名称，默认控制台为console、文件为file、滚动为rollfile</span><span class="token comment">#控制台附加器</span>log4j.appender.console <span class="token operator">=</span> org.apache.log4j.ConsoleAppender<span class="token comment">#Target可配置System.out及System.error，error显示文字为红色</span>log4j.appender.console.Target <span class="token operator">=</span> System.out<span class="token comment">#layout可分为：</span><span class="token comment"># HTMLLayrout--网页表格形式布局</span><span class="token comment"># SimpleLayout--简单布局，包含日志信息级别及日志信息字符串</span><span class="token comment"># PatternLayout--匹配器布局</span>log4j.appender.console.layout <span class="token operator">=</span> org.apache.log4j.PatternLayout<span class="token comment"># ConversionPattern结合PatternLayout使用，配置PatternLayout布局格式</span>log4j.appender.console.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span class="token comment">#文件附加器</span>log4j.appender.file <span class="token operator">=</span> org.apache.log4j.ConsoleAppenderlog4j.appender.file.Target <span class="token operator">=</span> /Users/semon/IdeaProjects/helloworld/jakartaee/log4j.loglog4j.appender.file.layout <span class="token operator">=</span> org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span class="token comment">#滚动附加器</span>log4j.appender.rollfile <span class="token operator">=</span> org.apache.log4j.ConsoleAppenderlog4j.appender.rollfile.Target <span class="token operator">=</span> System.outlog4j.appender.rollfile.layout <span class="token operator">=</span> org.apache.log4j.PatternLayoutlog4j.appender.rollfile.MaxFileSize<span class="token operator">=</span> 10kblog4j.appender.rollfile.layout.ConversionPattern <span class="token operator">=</span> <span class="token punctuation">[</span>%-5p<span class="token punctuation">]</span><span class="token punctuation">[</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">}</span><span class="token punctuation">]</span> %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h3><p>log4j2使用基本与log4j一致，通过xml配置文件来定义</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!-- status="TRACE"这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。OFF则关闭log4j2自己的日志输出 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OFF<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--过滤器：控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--append默认为false，每次清空日志文件  filename指定相对路径为项目根目录--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定日志滚动大小阈值为50M，超过大小文件进行压缩 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFile<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logs/app.log<span class="token punctuation">"</span></span>                     <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd <span class="token punctuation">'</span>at<span class="token punctuation">'</span> HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50MB<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 定义日志输出级别，默认为trace --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 定义启用的日志附加器 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 指定特定类的日志配置 --&gt;</span>        <span class="token comment">&lt;!-- additivity开启的话，由于这个logger也是满足root的，所以会被打印两遍。 不过root logger 的level是error，为什么Bar里面的trace信息也被打印两遍呢 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zzstxx.log4j2.HelloWorld2<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span>                <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 设置指定包目录下的输出级别 --&gt;</span>        <span class="token comment">&lt;!-- &lt;logger name="com.zzstxx.log4j2" level="warn"            additivity="false"&gt;            &lt;appender-ref ref="Console" /&gt;        &lt;/logger&gt;s --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h3><p>logback有三个核心模块logback-access、logback-core及logback-classic；其中logback-classic是log4j的升级版；可通过xml文件进行配置；</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token comment">&lt;!--scan=true ：自动加载xml配置文件，每隔scanPeriod进行一次扫描debug=true ：是否打印logback内部日志--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">DEBUG</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--statusListener：监听logback内部信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.OnConsoleStatusListener<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--name="stdout" 指定appender名称--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--指定日志格式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>file.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%-4relative [%thread] %-5level %logger{35} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ROLLINGFILE<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>mylog.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- rollover daily --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>mylog-%d{yyyy-MM-dd}.%i.log.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 每个日志文件大小不超过100MB，在日志文件总大小不超过20GB的情况下保存60天，超出则清楚部分日志 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>20GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--appender-ref 指定启用附加器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sl4j规范"><a href="#sl4j规范" class="headerlink" title="sl4j规范"></a>sl4j规范</h2><p>代表Simple Logging Facade for Java。它提供了Java中所有日志框架的简单抽象。因此，它使用户能够使用单个依赖项处理任何日志框架；</p><ul><li>使用SLF4J框架，可以在部署时迁移到所需的日志记录框架。</li><li>Slf4J提供了对所有流行的日志框架的绑定，例如log4j，JUL，Simple logging和NOP。因此可以在部署时切换到任何这些流行的框架。</li><li>无论使用哪种绑定，SLF4J都支持参数化日志记录消息。</li><li>由于SLF4J将应用程序和日志记录框架分离，因此可以轻松编写独立于日志记录框架的应用程序。而无需担心用于编写应用程序的日志记录框架。</li><li>SLF4J提供了一个简单的Java工具，称为迁移器。使用此工具，可以迁移现有项目，这些项目使用日志框架(如Jakarta Commons Logging(JCL)或log4j或Java.util.logging(JUL))到SLF4J。</li></ul><p>sl4j使用demo：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 创建记录日志的对象</span> <span class="token comment">//当需要更换日志实现jar时，仅需调整具体日志实现jar包及配置文件，代码不需要做变更</span>        <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Test01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运行环境变量</title>
      <link href="/blog/2021/02/24/java-cheng-xu-zhi-xing/"/>
      <url>/blog/2021/02/24/java-cheng-xu-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java执行及classpath"><a href="#Java执行及classpath" class="headerlink" title="Java执行及classpath"></a>Java执行及classpath</h1><h2 id="java-jar包执行"><a href="#java-jar包执行" class="headerlink" title="java jar包执行"></a>java jar包执行</h2><ul><li><p>java -jar jarname param1：直接指定需要运行的jar包名称，可接参数；</p></li><li><p>java -cp .：/etc/*:/conf classname param1：可通过cp指定classpath路径，支持通配符，后接入口main class名称，可接参数</p><ul><li><p>指定配置文件时，只能指定到目录，后不可添加/或/*</p></li><li><p>指定jar包通配时，需使用目录名后接/*,或枚举所有jar名称(jdk6以前仅支持枚举)；</p><ul><li><p>java -cp $(echo /data/apps/ilb/*.jar | tr ‘ ‘ ‘:’) com.chinacache.Main param1</p><h2 id="查询jar包中类名"><a href="#查询jar包中类名" class="headerlink" title="查询jar包中类名"></a>查询jar包中类名</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> *.jar<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">${file}</span><span class="token punctuation">;</span> jar vtf <span class="token variable">${file}</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'content'</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
